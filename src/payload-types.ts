/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    projects: Project;
    sessions: Session;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'user' | 'admin' | 'producer';
  /**
   * User preferences and settings
   */
  preferences?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  subscription?: {
    tier?: ('free' | 'pro' | 'enterprise') | null;
    maxProjects?: number | null;
    maxEpisodesPerProject?: number | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * Project ID reference
   */
  project: string;
  mediaType:
    | 'style_reference'
    | 'character_design'
    | 'environment_design'
    | 'concept_art'
    | 'storyboard'
    | 'video_segment'
    | 'audio_clip'
    | 'voice_profile'
    | 'music_track'
    | 'sound_effect'
    | 'final_video';
  /**
   * Whether this media was generated by an AI agent
   */
  agentGenerated?: boolean | null;
  generationMetadata?: {
    /**
     * ID of the agent that generated this media
     */
    agentId?: string | null;
    /**
     * Prompt used for generation
     */
    promptUsed?: string | null;
    /**
     * Version of the AI model used
     */
    modelVersion?: string | null;
    generationTime?: string | null;
    /**
     * Background task ID for tracking
     */
    taskId?: string | null;
  };
  /**
   * Jina v4 multimodal embedding vector
   */
  embedding?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Human or AI-generated description of the media
   */
  description?: string | null;
  /**
   * Array of tags for categorization
   */
  tags?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  relatedElements?: {
    /**
     * Character IDs featured in this media
     */
    characters?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Episode number if applicable
     */
    episode?: number | null;
    /**
     * Scene identifier if applicable
     */
    scene?: string | null;
    /**
     * Timestamp in seconds for video segments
     */
    timestamp?: number | null;
  };
  technicalData?: {
    /**
     * Duration in seconds for audio/video
     */
    duration?: number | null;
    /**
     * Resolution (e.g., 1920x1080)
     */
    resolution?: string | null;
    /**
     * Frames per second
     */
    fps?: number | null;
    /**
     * Audio sample rate in Hz
     */
    sampleRate?: number | null;
  };
  /**
   * Version number for iterative improvements
   */
  version?: number | null;
  status?: ('active' | 'draft' | 'archived' | 'processing' | 'failed') | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  description?: string | null;
  genre: 'action' | 'comedy' | 'drama' | 'horror' | 'sci-fi' | 'thriller' | 'romance' | 'documentary';
  /**
   * Total number of episodes planned
   */
  episodeCount: number;
  targetAudience?: ('children' | 'family' | 'teen' | 'adult') | null;
  status: 'concept' | 'pre-production' | 'production' | 'post-production' | 'completed' | 'on-hold';
  createdBy: string | User;
  /**
   * Users who can edit this project
   */
  collaborators?: (string | User)[] | null;
  /**
   * Reference images for visual style
   */
  styleReferences?: (string | Media)[] | null;
  projectSettings?: {
    aspectRatio?: ('16:9' | '4:3' | '21:9') | null;
    /**
     * Target duration per episode in minutes
     */
    episodeDuration?: number | null;
    qualityTier?: ('draft' | 'standard' | 'premium') | null;
  };
  /**
   * Automated progress tracking
   */
  progress?: {
    currentPhase?:
      | (
          | 'story_development'
          | 'character_creation'
          | 'visual_design'
          | 'audio_design'
          | 'scene_production'
          | 'post_production'
          | 'final_assembly'
        )
      | null;
    /**
     * Array of completed workflow steps
     */
    completedSteps?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Overall completion percentage
     */
    overallProgress?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: string;
  /**
   * Project ID reference
   */
  project: string;
  user: string | User;
  /**
   * Current workflow step identifier
   */
  currentStep: string;
  /**
   * Array of chat messages and interactions
   */
  conversationHistory?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Current context for LLM processing
   */
  contextData?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Whether system is waiting for user response
   */
  awaitingUserInput?: boolean | null;
  /**
   * Last set of choices presented to user
   */
  lastChoices?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  sessionState?: ('active' | 'paused' | 'completed' | 'error') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'sessions';
        value: string | Session;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  preferences?: T;
  subscription?:
    | T
    | {
        tier?: T;
        maxProjects?: T;
        maxEpisodesPerProject?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  project?: T;
  mediaType?: T;
  agentGenerated?: T;
  generationMetadata?:
    | T
    | {
        agentId?: T;
        promptUsed?: T;
        modelVersion?: T;
        generationTime?: T;
        taskId?: T;
      };
  embedding?: T;
  description?: T;
  tags?: T;
  relatedElements?:
    | T
    | {
        characters?: T;
        episode?: T;
        scene?: T;
        timestamp?: T;
      };
  technicalData?:
    | T
    | {
        duration?: T;
        resolution?: T;
        fps?: T;
        sampleRate?: T;
      };
  version?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  genre?: T;
  episodeCount?: T;
  targetAudience?: T;
  status?: T;
  createdBy?: T;
  collaborators?: T;
  styleReferences?: T;
  projectSettings?:
    | T
    | {
        aspectRatio?: T;
        episodeDuration?: T;
        qualityTier?: T;
      };
  progress?:
    | T
    | {
        currentPhase?: T;
        completedSteps?: T;
        overallProgress?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  project?: T;
  user?: T;
  currentStep?: T;
  conversationHistory?: T;
  contextData?: T;
  awaitingUserInput?: T;
  lastChoices?: T;
  sessionState?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}