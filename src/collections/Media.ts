import type { CollectionConfig } from 'payload'
import { s3Storage } from '@payloadcms/storage-s3'

export const Media: CollectionConfig = {
  slug: 'media',
  upload: {
    staticDir: 'media',
    staticURL: '/media',
    // Cloudflare R2 configuration (S3-compatible)
    adapter: process.env.R2_ENDPOINT ? s3Storage({
      config: {
        endpoint: process.env.R2_ENDPOINT,
        region: 'auto',
        credentials: {
          accessKeyId: process.env.R2_ACCESS_KEY_ID!,
          secretAccessKey: process.env.R2_SECRET_ACCESS_KEY!,
        },
        forcePathStyle: true, // Required for R2
      },
      bucket: process.env.R2_BUCKET_NAME!,
    }) : undefined,
    imageSizes: [
      {
        name: 'thumbnail',
        width: 400,
        height: 300,
        position: 'centre',
      },
      {
        name: 'card',
        width: 768,
        height: 1024,
        position: 'centre',
      },
    ],
    adminThumbnail: 'thumbnail',
    mimeTypes: ['image/*', 'video/*', 'audio/*'],
  },
  access: {
    read: ({ req: { user } }) => {
      if (user?.role === 'admin') return true
      return {
        or: [
          { project: { createdBy: { equals: user?.id } } },
          { project: { collaborators: { contains: user?.id } } }
        ]
      }
    },
  },
  fields: [
    {
      name: 'alt',
      type: 'text',
      required: true,
    },
    {
      name: 'project',
      type: 'text',
      required: true,
      admin: {
        position: 'sidebar',
        description: 'Project ID reference',
      },
    },
    {
      name: 'mediaType',
      type: 'select',
      required: true,
      options: [
        { label: 'Style Reference', value: 'style_reference' },
        { label: 'Character Design', value: 'character_design' },
        { label: 'Environment Design', value: 'environment_design' },
        { label: 'Concept Art', value: 'concept_art' },
        { label: 'Storyboard', value: 'storyboard' },
        { label: 'Video Segment', value: 'video_segment' },
        { label: 'Audio Clip', value: 'audio_clip' },
        { label: 'Voice Profile', value: 'voice_profile' },
        { label: 'Music Track', value: 'music_track' },
        { label: 'Sound Effect', value: 'sound_effect' },
        { label: 'Final Video', value: 'final_video' },
      ],
    },
    {
      name: 'agentGenerated',
      type: 'checkbox',
      defaultValue: false,
      admin: {
        description: 'Whether this media was generated by an AI agent',
      },
    },
    {
      name: 'generationMetadata',
      type: 'group',
      admin: {
        condition: (data) => data.agentGenerated,
      },
      fields: [
        {
          name: 'agentId',
          type: 'text',
          admin: {
            description: 'ID of the agent that generated this media',
          },
        },
        {
          name: 'promptUsed',
          type: 'textarea',
          admin: {
            description: 'Prompt used for generation',
          },
        },
        {
          name: 'modelVersion',
          type: 'text',
          admin: {
            description: 'Version of the AI model used',
          },
        },
        {
          name: 'generationTime',
          type: 'date',
          admin: {
            date: {
              pickerAppearance: 'dayAndTime',
            },
          },
        },
        {
          name: 'taskId',
          type: 'text',
          admin: {
            description: 'Background task ID for tracking',
          },
        },
      ],
    },
    {
      name: 'embedding',
      type: 'json',
      admin: {
        description: 'Jina v4 multimodal embedding vector',
      },
    },
    {
      name: 'description',
      type: 'textarea',
      admin: {
        description: 'Human or AI-generated description of the media',
      },
    },
    {
      name: 'tags',
      type: 'json',
      defaultValue: [],
      admin: {
        description: 'Array of tags for categorization',
      },
    },
    {
      name: 'relatedElements',
      type: 'group',
      fields: [
        {
          name: 'characters',
          type: 'json',
          defaultValue: [],
          admin: {
            description: 'Character IDs featured in this media',
          },
        },
        {
          name: 'episode',
          type: 'number',
          admin: {
            description: 'Episode number if applicable',
          },
        },
        {
          name: 'scene',
          type: 'text',
          admin: {
            description: 'Scene identifier if applicable',
          },
        },
        {
          name: 'timestamp',
          type: 'number',
          admin: {
            description: 'Timestamp in seconds for video segments',
          },
        },
      ],
    },
    {
      name: 'technicalData',
      type: 'group',
      fields: [
        {
          name: 'duration',
          type: 'number',
          admin: {
            condition: (data) => ['video_segment', 'audio_clip', 'music_track'].includes(data.mediaType),
            description: 'Duration in seconds for audio/video',
          },
        },
        {
          name: 'resolution',
          type: 'text',
          admin: {
            condition: (data) => ['character_design', 'environment_design', 'video_segment'].includes(data.mediaType),
            description: 'Resolution (e.g., 1920x1080)',
          },
        },
        {
          name: 'fps',
          type: 'number',
          admin: {
            condition: (data) => data.mediaType === 'video_segment',
            description: 'Frames per second',
          },
        },
        {
          name: 'sampleRate',
          type: 'number',
          admin: {
            condition: (data) => ['audio_clip', 'voice_profile', 'music_track'].includes(data.mediaType),
            description: 'Audio sample rate in Hz',
          },
        },
      ],
    },
    {
      name: 'version',
      type: 'number',
      defaultValue: 1,
      admin: {
        description: 'Version number for iterative improvements',
      },
    },
    {
      name: 'status',
      type: 'select',
      defaultValue: 'active',
      options: [
        { label: 'Active', value: 'active' },
        { label: 'Draft', value: 'draft' },
        { label: 'Archived', value: 'archived' },
        { label: 'Processing', value: 'processing' },
        { label: 'Failed', value: 'failed' },
      ],
    },
  ],
  hooks: {
    beforeChange: [
      async ({ data, operation, req }) => {
        if (operation === 'create' && req.file) {
          data.status = 'processing'
        }
        return data
      },
    ],
  },
  timestamps: true,
}
